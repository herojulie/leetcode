# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x, left=None, right=None):
        self.val = x
        self.left = left
        self.right = right

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root == p or root == q:
            return root
        
        left, right = None, None
        if root.left:
            left = self.lowestCommonAncestor(root.left, p, q)
        if root.right:
            right = self.lowestCommonAncestor(root.right, p, q)
        
        if left and right:
            return root
        return left or right


if __name__ == '__main__':
    # tc1
    # p = TreeNode(2, TreeNode(0), TreeNode(4, TreeNode(3), TreeNode(5)))
    # q = TreeNode(8, TreeNode(7), TreeNode(9))
    # tc1 = TreeNode(6, p, q)
    # ans = Solution().lowestCommonAncestor(tc1, p, q)
    # print(ans.val)

    # tc2
    b = TreeNode(4, TreeNode(3), TreeNode(5))
    a = TreeNode(2, TreeNode(0), b)   
    tc2 = TreeNode(6, a, TreeNode(8, TreeNode(7), TreeNode(9)))
    ans = Solution().lowestCommonAncestor(tc2, a, b)
    print(ans.val)
